// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma kernel CSMain_SOA

struct BufferStruct
{
	float4 pos;
	float4 velocity;
};

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
RWStructuredBuffer<BufferStruct> _buffer;
RWStructuredBuffer<float4> _pos_buffer_soa;
RWStructuredBuffer<float4> _velocity_buffer_soa;


[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	// TODO: insert actual code here!
	float4 pos = _buffer[id.x].pos;
	float4 velocity = _buffer[id.x].velocity;

	for (int i = 0; i < 10000; ++i)
	{
		pos += 0.00000001 * sin(i) * cos(i);
	}
	pos = float4(1, 0, 0, 1);
	Result[id.xy] = pos + velocity;// = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
	_buffer[id.x].pos = pos + velocity;
	_buffer[id.x].velocity = pos + velocity;
}

[numthreads(8, 8, 1)]
void CSMain_SOA(uint3 id : SV_DispatchThreadID)
{
	// TODO: insert actual code here!
	float4 pos = _pos_buffer_soa[id.x];
	float4 velocity = _velocity_buffer_soa[id.x];

	for (int i = 0; i < 10000; ++i)
	{
		pos += 0.00000001 * sin(i) * cos(i);
	}
	pos = float4(1, 0, 0, 1);
	Result[id.xy] = pos + velocity;// = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
	_pos_buffer_soa[id.x] = pos + velocity;
	_velocity_buffer_soa[id.x] = pos + velocity;
}
