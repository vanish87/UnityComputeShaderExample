// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Particle
#pragma kernel Particle_NONE
#pragma kernel Particle_SOA

#include "Assets/Common.cginc"
#include "Assets/Math.cginc"


// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<ParticleStruct> _buffer;


[numthreads(8, 8, 1)]
void Particle_NONE(uint3 id : SV_DispatchThreadID)
{

}

[numthreads(8, 8, 1)]
void Particle(uint3 id : SV_DispatchThreadID)
{
	float3 pos = _buffer[id.x].position;
	float3 velocity = _buffer[id.x].velocity;
	float  mass = _buffer[id.x].mass;
	
	//do velocity calculation here
	float2  D;
	float2x2 A, U, Vt;
	A[0][0] = pos.x;
	A[0][1] = pos.y;
	A[1][0] = pos.z;
	A[1][1] = mass;
	GetSVD2D(A, U, D, Vt);

	A = U * Vt;

	pos.x = A[0][0];
	pos.y = A[0][1];
	velocity.x = A[1][0];
	velocity.y = A[1][1];
	 
	_buffer[id.x].position = pos;
	_buffer[id.x].velocity = velocity;
	_buffer[id.x].mass = mass;

}

RWStructuredBuffer<float3> _buffer_pos;
RWStructuredBuffer<float3> _buffer_velocity;
RWStructuredBuffer<float>  _buffer_mass;
[numthreads(8, 8, 1)]
void Particle_SOA(uint3 id : SV_DispatchThreadID)
{
	float3 pos = _buffer_pos[id.x];
	float3 velocity = _buffer_velocity[id.x];
	float  mass = _buffer_mass[id.x];

	//do velocity calculation here
	float2  D;
	float2x2 A, U, Vt;
	A[0][0] = pos.x;
	A[0][1] = pos.y;
	A[1][0] = pos.z;
	A[1][1] = mass;
	GetSVD2D(A, U, D, Vt);

	A = U * Vt;

	pos.x = A[0][0];
	pos.y = A[0][1];
	velocity.x = A[1][0];
	velocity.y = A[1][1];

	_buffer_pos[id.x]		= pos;
	_buffer_velocity[id.x]	= velocity;
	_buffer_mass[id.x]		= mass;

}
